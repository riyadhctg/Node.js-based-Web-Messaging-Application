var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var index = require('./routes/index');

var app = express();

var http = require('http').Server(app);
var io = require('socket.io')(http);
var mongoose = require('mongoose');


//you can open a free account in mlab and replace the following link

var dbUrl = 'mongodb://yoururl'

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs'); //I am using ejs as the view engine as it looks like html rather than using jade

app.use(favicon(path.join(__dirname, '/public/favicon-circle.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: false
}));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', index);

//defining a model/data schema for mongoose data
var Message = mongoose.model('message', {
    name: String,
    message: String
})

app.get('/messages', (req, res) => {
    console.log('get being called');
    Message.find({}, (err, messages) => {
        res.send(messages)
    })
})

app.post('/messages', (req, res) => {
    console.log('post being called');
    var message = new Message(req.body)

    message.save((err) => {
        if (err)
            sendStatus(500)
        io.emit('message', req.body)
        res.sendStatus(200)
    })
})

app.post('/delele_message', (req, res) => {
    console.log('delete being called');
    io.emit('deleteAll'); //emitting event for socket.on for real time updates between clients
    Message.remove(function(err) {});
})


io.on('connection', (socket) => {
    console.log('a user has been connected');
    /*
    //use the following code to delete all the messages upon a disconnect event
    socket.on('disconnect', () =>{
      io.emit('deleteAll');
      Message.remove(function(err) {  
      });
      console.log('a user has been disconnected');
    });
    */
});


mongoose.connect(dbUrl, {
    useMongoClient: true
}, (err) => {
    console.log("mongoose connected");
});


// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

/*
as I created the server listen event here with http, I disabled the default listenner 
[app.set('port', port);] generated by express generator in the www bin file
*/
var server = http.listen(8000, () => {
    console.log('server is listening on port', server.address().port)
});

module.exports = app;
